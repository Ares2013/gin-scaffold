package controllers

import (
	"{{.PackageName}}/helpers"
	"{{.PackageName}}/models"
	"github.com/gin-gonic/gin"
	"gopkg.in/mgo.v2/bson"
)

type {{.ControllerName}}Controller struct {
	Router *gin.Engine
}

func (controller *{{.ControllerName}}Controller) create{{.ModelName}}(c *gin.Context) {
	c.Request.ParseForm()

	{{.InstanceName}} := &models.{{.ModelName}}{}
	{{.InstanceName}}.SetAttributes(c.Request.Form)

	if {{.InstanceName}}.Save() {
		helpers.JSONResponseObject(c, 200, {{.InstanceName}})
	} else {
		helpers.JSONResponse(c, 400, {{.InstanceName}}.ErrorMessages())
	}
}

func (controller *{{.ControllerName}}Controller) list{{.ModelNamePlural}}(c *gin.Context) {
	session := models.New{{.ModelName}}Session()
	defer session.Close()

	query := session.Query(bson.M{})
	query.Sort("-created_at").Limit(20)

	{{.InstanceNamePlural}} := models.Load{{.ModelNamePlural}}(query)
	{{.InstanceNamePlural}}Response := make([]helpers.ResponseMap, len({{.InstanceNamePlural}}))
	for i, {{.InstanceNamePlural}} := range {{.InstanceNamePlural}} {
		{{.InstanceNamePlural}}Response[i] = {{.InstanceNamePlural}}.ToResponseMap()
	}

	helpers.JSONResponseArray(c, 200, {{.InstanceNamePlural}}Response)
}

func (controller *{{.ControllerName}}Controller) get{{.ModelName}}(c *gin.Context) {
	{{.InstanceName}}, err := find{{.ModelName}}ByID(c)

	if err != nil {
		helpers.JSONResponseError(c, err)
		return
	}

    helpers.JSONResponseObject(c, 200, {{.InstanceName}})
}

func (controller *{{.ControllerName}}Controller) update{{.ModelName}}(c *gin.Context) {
	{{.InstanceName}}, err := find{{.ModelName}}ByID(c)

	if err != nil {
		helpers.JSONResponseError(c, err)
		return
	}

	{{.InstanceName}}.SetAttributes(c.Request.Form)

	if {{.InstanceName}}.Save() {
		helpers.JSONResponseObject(c, 200, {{.InstanceName}})
	} else {
		helpers.JSONResponse(c, 400, {{.InstanceName}}.ErrorMessages())
	}
}

func (controller *{{.ControllerName}}Controller) Setup() {
	controller.Router.POST("/{{.RoutePath}}", controller.create{{.ModelName}})
	controller.Router.GET("/{{.RoutePath}}", controller.list{{.ControllerName}})
	controller.Router.GET("/{{.RoutePath}}/:id", controller.get{{.ModelName}})
	controller.Router.PUT("/{{.RoutePath}}/:id", controller.update{{.ModelName}})
}

// vi:syntax=go

