package models

import (
	"{{.PackageName}}/config"
	"gopkg.in/mgo.v2"
	"gopkg.in/mgo.v2/bson"
)

var (
	// Max{{.ModelNamePlural}}ToFetch is the maximum {{.InstanceNamePlural}} that are fetched from the db.
    Max{{.ModelNamePlural}}ToFetch = 50
)

// {{.ModelName}}Session handles the connections to the database
type {{.ModelName}}Session struct {
	backend *mgo.Session
}

// New{{.ModelName}}Session creates a new database session.
func New{{.ModelName}}Session() *{{.ModelName}}Session {
	return &{{.ModelName}}Session{backend: config.DBSession().Copy()}
}

// Close closes the database session.
func (session *{{.ModelName}}Session) Close() {
	session.backend.Close()
}

// Insert inserts a {{.InstanceName}} in the database.
func (session *{{.ModelName}}Session) Insert({{.InstanceName}} *{{.ModelName}}) error {
	return session.collection().Insert({{.InstanceName}})
}

// Update updates the db with the given {{.InstanceName}}
func (session *{{.ModelName}}Session) Update({{.InstanceName}} *{{.ModelName}}) error {
	return session.collection().UpdateId({{.InstanceName}}.ID, {{.InstanceName}})
}

// Query creates a query
func (session *{{.ModelName}}Session) Query(query bson.M) *mgo.Query {
	criteria := session.collection().Find(query).Limit(Max{{.ModelNamePlural}}ToFetch)

	return criteria
}

func (session *{{.ModelName}}Session) database() *mgo.Database {
	return session.backend.DB(config.DefaultDBName)
}

func (session *{{.ModelName}}Session) collection() *mgo.Collection {
	return session.database().C("{{.InstanceNamePlural  | Underscore}}")
}
