{{$instanceName := .InstanceName}}\
package models

import (
	"{{.PackageName}}/helpers"
	"gopkg.in/mgo.v2"
	"gopkg.in/mgo.v2/bson"
	"net/url"
)

const (
)

type {{.ModelName}} struct {
	ID bson.ObjectId  `bson:"_id,omitempty"`
{{range $fieldName, $fieldType := .Fields}}\
	{{$fieldName}} {{$fieldType}} `bson:"{{$fieldName | Underscore}}"`
{{end}}\
	Errors helpers.Errors `bson:"-"`
}

func New{{.ModelName}}() *{{.ModelName}} {
	{{.InstanceName}} := &{{.ModelName}}{}

	// Set default values here

	return {{.InstanceName}}
}

func ({{.InstanceName}} *{{.ModelName}}) Save() bool {
	isNewRecord := (len({{.InstanceName}}.ID) == 0)
	if isNewRecord {
		{{.InstanceName}}.ID = bson.NewObjectId()
	}

	if !{{.InstanceName}}.IsValid() {
		return false
	}

	if isNewRecord {
		return {{.InstanceName}}.insert()
	}

	return {{.InstanceName}}.update()
}

func ({{.InstanceName}} *{{.ModelName}}) insert() bool {
	session := New{{.ModelName}}Session()
	defer session.Close()

	err := session.Insert({{.InstanceName}})
	if err == nil {
		return true
	}

	return false
}

func ({{.InstanceName}} *{{.ModelName}}) update() bool {
	session := New{{.ModelName}}Session()
	defer session.Close()

	err := session.Update({{.InstanceName}})
	if err == nil {
		return true
	}

	return false
}

func ({{.InstanceName}} *{{.ModelName}}) ToResponseMap() helpers.ResponseMap {
	return helpers.ResponseMap{
		"id": {{.InstanceName}}.ID,
{{range $fieldName, $fieldType := .Fields}}\
		"{{$fieldName | Underscore}}": {{$instanceName}}.{{$fieldName}},
{{end}}
	}
}

func ({{.InstanceName}} *{{.ModelName}}) ErrorMessages() helpers.ResponseMap {
	errorMessages := helpers.ResponseMap{}
	for fieldName, message := range {{.InstanceName}}.Errors.Messages {
		errorMessages[fieldName] = message
	}

	return errorMessages
}

func ({{.InstanceName}} *{{.ModelName}}) IsValid() bool {
	{{.InstanceName}}.Errors.Clear()

	// Run validations here.

	return !{{.InstanceName}}.Errors.HasMessages()
}

func ({{.InstanceName}} *{{.ModelName}}) SetAttributes(params url.Values) {

{{range $fieldName, $fieldType := .Fields}}\
	if value, ok := params["{{$fieldName | Underscore}}"]; ok {
		{{$instanceName}}.{{$fieldName}} = value[0]
	}
{{end}}\

}

// FindOne{{.ModelName}} finds a {{.InstanceName}} in the database using the given `query`
func FindOne{{.ModelName}}(query bson.M) *{{.ModelName}} {
	{{.InstanceName}} := &{{.ModelName}}{}

	session := New{{.ModelName}}Session()
	defer session.Close()

	criteria := session.Query(query)
	err := criteria.One({{.InstanceName}})
	if err != nil {
		panic(err)
	}

	return {{.InstanceName}}
}

// FindOne{{.ModelName}}ByID finds a {{.ModelName}} in the database using the given `id`
func FindOne{{.ModelName}}ByID(id string) *{{.ModelName}} {
	{{.InstanceName}}ID := bson.ObjectIdHex(id)
	{{.InstanceName}} := FindOne{{.ModelName}}(bson.M{"_id": {{.InstanceName}}ID})

	return {{.InstanceName}}
}

// Load{{.ModelNamePlural}} takes a query a tries to convert it into a {{.ModelName}} array.
func Load{{.ModelNamePlural}}(query *mgo.Query) []*{{.ModelName}} {
	{{.InstanceNamePlural}} := []*{{.ModelName}}{}

	err := query.All(&{{.InstanceNamePlural}})
	if err != nil {
		helpers.HandleDBError(err)
	}

	return {{.InstanceNamePlural}}
}

// vi:syntax=go
